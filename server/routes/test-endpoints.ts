import { Request, Response } from 'express';
import { sendReliableNotification } from '../better-notify.js';

// Import the direct Telegram API functions
import * as directTelegramApi from '../direct_telegram_api.js';

/**
 * Handles the test notification request in the Telegram Mini App
 * This function sends a test notification directly to the user's Telegram ID
 * Uses multiple approaches to maximize reliability
 */
export async function handleTestNotification(req: Request, res: Response) {
  try {
    // Get the Telegram ID from the request body
    let { telegramId } = req.body;
    
    if (!telegramId) {
      return res.status(400).json({ 
        success: false, 
        message: "Telegram ID is required" 
      });
    }
    
    // Always use the real Telegram ID for testing
    const REAL_TELEGRAM_ID = '262371163';
    
    // Ensure we're using a valid Telegram ID
    if (telegramId !== REAL_TELEGRAM_ID) {
      console.log(`\nüì± Telegram ID ${telegramId} provided, but using ${REAL_TELEGRAM_ID} for reliability`);
      telegramId = REAL_TELEGRAM_ID;
    } else {
      console.log(`\nüì± Using verified Telegram ID: ${telegramId}`);
    }
    
    console.log(`\nüì± TEST NOTIFICATION FROM TELEGRAM MINI APP`);
    console.log(`üÜî Telegram ID: ${telegramId}`);
    
    // Current timestamp for uniqueness
    const timestamp = new Date().toLocaleTimeString();
    
    // Create a test message with HTML formatting
    const message = `
<b>üîî –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è MunaLuna</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è MunaLuna.

üì± Telegram ID: ${telegramId}
‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${timestamp}
üîÑ –¢–∏–ø: –¢–µ—Å—Ç –∏–∑ Mini App (–ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤)

<i>–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!</i>
    `;
    
    // Try multiple notification methods in sequence, starting with the most reliable
    
    // Method 1: Direct Telegram API (most reliable, bypasses libraries)
    console.log(`\nüß™ Trying Direct API method first...`);
    try {
      const directResult = await directTelegramApi.sendDirectApiMessage(telegramId, message);
      
      if (directResult) {
        console.log('‚úÖ Direct API notification sent successfully!');
        return res.json({ 
          success: true, 
          method: 'direct_api',
          message: "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" 
        });
      }
    } catch (directError) {
      console.error('‚ùå Direct API method failed:', directError);
    }
    
    // Method 2: Enhanced notification with retries
    console.log(`\nüß™ Trying Enhanced Notification method...`);
    try {
      const enhancedResult = await sendReliableNotification(telegramId, message, {
        useHTML: true,
        enableSound: true,
        priority: 'high',
        retryCount: 3
      });
      
      if (enhancedResult) {
        console.log('‚úÖ Enhanced notification sent successfully!');
        return res.json({ 
          success: true, 
          method: 'enhanced',
          message: "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" 
        });
      }
    } catch (enhancedError) {
      console.error('‚ùå Enhanced method failed:', enhancedError);
    }
    
    // Method 3: Try silent notification as last resort
    console.log(`\nüß™ Trying Silent Notification method as last resort...`);
    try {
      const silentResult = await directTelegramApi.sendSilentNotification(telegramId, message);
      
      if (silentResult) {
        console.log('‚úÖ Silent notification sent successfully!');
        return res.json({ 
          success: true, 
          method: 'silent',
          message: "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" 
        });
      }
    } catch (silentError) {
      console.error('‚ùå Silent method failed:', silentError);
    }
    
    // All methods failed
    console.error('‚ùå All notification methods failed.');
    return res.status(500).json({ 
      success: false, 
      message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫." 
    });
  } catch (error) {
    console.error('Error in Mini App test notification:', error);
    return res.status(500).json({ 
      success: false, 
      message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è." 
    });
  }
}